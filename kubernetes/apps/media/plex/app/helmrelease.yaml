---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app plex
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.7.1
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  dependsOn:
    - name: rook-ceph-cluster
      namespace: rook-ceph
    - name: volsync
      namespace: storage
    - name: nvidia-device-plugin
      namespace: kube-system
  values:
    controllers:
      plex:
        annotations:
          reloader.stakater.com/auto: "true"
        containers:
          app:
            image:
              repository: ghcr.io/onedr0p/plex
              tag: 1.41.4.9463-630c9f557@sha256:7e169d17670c8f34bcb1f40500747b1b689c1c2ef7b80e604b968b5375e62022
            env:
              TZ: "${TIMEZONE}"
              ALLOWED_NETWORKS: "${CR_LAN_CIDR},${GH_LAN_CIDR},${PW_LAN_CIDR}"
              PLEX_ADVERTISE_URL: "http://${SVC_PLEX_ADDR}:32400,https://plex.${SECRET_DOMAIN}"
              PLEX_PREFERENCE_1: "AllowMediaDeletion=0"
              PLEX_PREFERENCE_2: "EnableIPv6=0"
              PLEX_PREFERENCE_3: "FriendlyName=Talos Plex"
              PLEX_PREFERENCE_4: "LanNetworksBandwidth=${CR_LAN_CIDR},${GH_LAN_CIDR},${PW_LAN_CIDR}"
              NVIDIA_VISIBLE_DEVICES: "all"
              NVIDIA_DRIVER_CAPABILITIES: "all"
              HARDWARE_DEVICE_PATH: "/dev/nvidia0"
            probes:
              liveness: &probes
                enabled: true
                custom: true
                spec:
                  httpGet:
                    path: /identity
                    port: &port 32400
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
              startup:
                enabled: true
                spec:
                  failureThreshold: 30
                  periodSeconds: 10
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 50m
                memory: 512Mi
                nvidia.com/gpu: 1
              limits:
                nvidia.com/gpu: 1
                memory: 8Gi
    defaultPodOptions:
      runtimeClassName: nvidia
      nodeSelector:
        nvidia.feature.node.kubernetes.io/gpu: "true"
      securityContext:
        runAsNonRoot: true
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: [44, 10000] # TODO: Tidy up supplementalGroups when we have a better understanding of what's needed from a TrueNAS perspective
        seccompProfile: { type: RuntimeDefault }
    service:
      app:
        controller: plex
        type: LoadBalancer
        annotations:
          lbipam.cilium.io/ips: ${SVC_PLEX_ADDR}
        ports:
          http:
            port: *port
    ingress:
      app:
        className: external
        annotations:
          external-dns.alpha.kubernetes.io/target: external.${SECRET_DOMAIN}
          # gethomepage.dev/enabled: "true"
          # gethomepage.dev/group: Video
          # gethomepage.dev/name: Plex
          # gethomepage.dev/app: *app
          # gethomepage.dev/icon: plex.png
          # gethomepage.dev/description: Media Player
          # gethomepage.dev/widget.type: plex
          # gethomepage.dev/widget.url: http://plex.media.svc.cluster.local:32400
          # gethomepage.dev/widget.key: "{{ `{{HOMEPAGE_VAR_PLEX_TOKEN}}` }}"
          # nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
          # nginx.ingress.kubernetes.io/configuration-snippet: ${THEME_PARK_SNIPPET}
        hosts:
          - host: "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: http
          # - host: "{{ .Release.Name }}.${SECRET_INTERNAL_DOMAIN}"
          #   paths:
          #     - path: /
          #       service:
          #         identifier: app
          #         port: http
    persistence:
      config:
        existingClaim: *app
        # TODO: If setting up Plex for the first time, you'll want to add the globalMounts section
        globalMounts:
          - path: /config/Library/Application Support/Plex Media Server
      # Separate PVC for cache to avoid backing up cache files
      cache:
        existingClaim: plex-cache
        globalMounts:
          - path: /config/Library/Application Support/Plex Media Server/Cache
      logs:
        type: emptyDir
        globalMounts:
          - path: /config/Library/Application Support/Plex Media Server/Logs
      tmp:
        type: emptyDir
      transcode:
        type: emptyDir
      tv:
        type: nfs
        server: ${SECRET_STORAGE_SERVER}
        path: /mnt/pool/tv
        globalMounts:
          - path: /tv
            readOnly: true
      movies:
        type: nfs
        server: ${SECRET_STORAGE_SERVER}
        path: /mnt/pool/movies
        globalMounts:
          - path: /movies
            readOnly: true
      tv4k:
        type: nfs
        server: ${SECRET_STORAGE_SERVER}
        path: /mnt/pool/tv4k
        globalMounts:
          - path: /tv4k
            readOnly: true
      movies4k:
        type: nfs
        server: ${SECRET_STORAGE_SERVER}
        path: /mnt/pool/movies4k
        globalMounts:
          - path: /movies4k
            readOnly: true
