---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/main/charts/other/app-template/schemas/helmrelease-helm-v2.schema.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app prowlarr
spec:
  interval: 30m
  chart:
    spec:
      chart: app-template
      version: 3.4.0
      sourceRef:
        kind: HelmRepository
        name: bjw-s
        namespace: flux-system
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      strategy: rollback
      retries: 3
  dependsOn:
    - name: rook-ceph-cluster
      namespace: rook-ceph
  values:
    controllers:
      prowlarr:
        labels:
          postgres: "true"
        annotations:
          reloader.stakater.com/auto: "true"
        initContainers:
          init-db:
            image:
              repository: ghcr.io/onedr0p/postgres-init
              tag: 16
            envFrom: &envFrom
              - secretRef:
                  name: prowlarr-secret
          gluetun:
            image:
              repository: ghcr.io/qdm12/gluetun
              tag: v3.39.0
            env:
              TZ: ${TIMEZONE}
              FIREWALL: true
              FIREWALL_DEBUG: on
              # Comma separated list of ports to allow through the default interface. This seems needed for Kubernetes sidecars.
              FIREWALL_INPUT_PORTS: 80,9999
              FIREWALL_OUTBOUND_SUBNETS: "${CLUSTER_PODS_CIDR},${CLUSTER_SVCS_CIDR},${CR_LAN_CIDR},${GH_LAN_CIDR},${PW_LAN_CIDR}"
              HEALTH_SERVER_ADDRESS: ":9999"
              HEALTH_VPN_DURATION_INITIAL: 60s
              LOG_LEVEL: debug
              # prevent memory spike and avoid I/O
              STORAGE_FILEPATH: ""
              VPN_INTERFACE: wg0
              VPN_TYPE: wireguard
              UPDATER_PERIOD: 12h
              # is absolutely needed if the container is expected to be able to resolve or communicate to any cluster services, without it cluster services cannot be resolved consistently or at all in many setups.
              DNS_KEEP_NAMESERVER: on
            envFrom:
              - secret: prowlarr-secret
            probes:
              liveness:
                enabled: false
                custom: true
                spec:
                  httpGet:
                    path: /
                    port: 9999
              readiness:
                enabled: false
                custom: true
                spec:
                  httpGet:
                    path: /
                    port: 9999
                  initialDelaySeconds: 120
                  periodSeconds: 10
                  failureThreshold: 5
            resources:
              requests:
                memory: 48Mi
              limits:
                memory: 96Mi
            restartPolicy: Always
            securityContext:
              readOnlyRootFilesystem: false
              runAsNonRoot: false
              runAsUser: 0
              capabilities: { add: ["NET_ADMIN"] }
        containers:
          app:
            image:
              repository: ghcr.io/onedr0p/prowlarr-develop
              tag: 1.24.3.4754@sha256:9c88257656e4ac893d692abf38a784c80ef1638eb99fae376bdb48f75498ce52
            env:
              TZ: ${TIMEZONE}
              PROWLARR__APP__INSTANCENAME: Prowlarr
              PROWLARR__APP__THEME: dark
              PROWLARR__AUTH__REQUIRED: DisabledForLocalAddresses
              PROWLARR__LOG__DBENABLED: "False"
              PROWLARR__LOG__LEVEL: info
              PROWLARR__SERVER__PORT: &port 80
              PROWLARR__UPDATE__BRANCH: develop
            envFrom: *envFrom
            probes:
              liveness: &probes
                enabled: false
                custom: true
                spec:
                  httpGet:
                    path: /ping
                    port: *port
                  initialDelaySeconds: 0
                  periodSeconds: 10
                  timeoutSeconds: 1
                  failureThreshold: 3
              readiness: *probes
            securityContext:
              allowPrivilegeEscalation: false
              readOnlyRootFilesystem: true
              capabilities: { drop: ["ALL"] }
            resources:
              requests:
                cpu: 100m
              limits:
                memory: 1Gi
        pod:
          labels:
            gluetun: "true"
    service:
      app:
        controller: *app
        ports:
          http:
            port: *port
    ingress:
      app:
        className: internal
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Downloads
          gethomepage.dev/name: Prowlarr
          gethomepage.dev/icon: prowlarr.png
          gethomepage.dev/description: Torrent/NZB Indexer Management
          gethomepage.dev/widget.type: prowlarr
          gethomepage.dev/widget.url: http://prowlarr.downloads.svc.cluster.local
          gethomepage.dev/widget.key: "{{ `{{HOMEPAGE_VAR_PROWLARR_TOKEN}}` }}"
          external-dns.alpha.kubernetes.io/target: internal.${SECRET_DOMAIN}
        hosts:
          - host: "{{ .Release.Name }}.${SECRET_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
                service:
                  identifier: app
                  port: http
          - host: "{{ .Release.Name }}.${SECRET_INTERNAL_DOMAIN}"
            paths:
              - path: /
                service:
                  identifier: app
                  port: http
    persistence:
      config:
        type: emptyDir
      tmp:
        type: emptyDir
